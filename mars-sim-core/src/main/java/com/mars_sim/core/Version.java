/*
 * Mars Simulation Project
 * Version.java
 * @date 2024-09-01
 * @author Barry Evans
 */
package com.mars_sim.core;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;

/**
 * This class will read the properties file automatically created by the Maven build.
 * See the pom.xml plugin git-commit-id-maven-plugin for details.
 * The implementation of this class must be synchronised with the plugin.
 */
public final class Version {

	private static final String NOT_SPECIFIED = "Not Specified";

	// Properties of the version file generated by the Maven plugin
	// "git-commit-id-maven-plugin"
	private static final String VERSION_PROPERTY = "git.build.version";
	private static final String DIRTY_PROPERTY = "git.dirty";
	private static final String BUILD_PROPERTY = "git.commit.id.abbrev";
	private static final String DATE_PROPERTY = "git.build.time";


	private String build;
	private String versionTag;
	private boolean isDirty;
	private String buildTime;
	
	
	/**
	 * Create a Version from a source stream.
	 * @param source Source of the content
	 * @return
	 * @throws IOException
	 */
	public static Version fromStream(InputStream source) throws IOException {
		Properties props = new Properties();
		props.load(source);

		// Pick out key settings
		var build = props.getProperty(BUILD_PROPERTY, NOT_SPECIFIED);
		var isDirty = props.getProperty(DIRTY_PROPERTY, "false").equalsIgnoreCase("true");
		var versionTag = props.getProperty(VERSION_PROPERTY, NOT_SPECIFIED);
		var buildDate = props.getProperty(DATE_PROPERTY, NOT_SPECIFIED);

		return new Version(versionTag, build, isDirty, buildDate);
	}

	/**
	 * Default constructor for unknown version.
	 */
	public Version() {
		this.versionTag = NOT_SPECIFIED;
		this.build = NOT_SPECIFIED;
		this.isDirty = false;
		this.buildTime = NOT_SPECIFIED;
	}

	// Private constructor to stop instantiation.
	public Version(String versionTag, String build, boolean isDirty, String buildDate) {
		this.versionTag = versionTag;
		this.build = build;
		this.isDirty = isDirty;
		this.buildTime = buildDate;
	}

	/**
	 * Gets the build number which is the abbreviated Git commit. If there
	 * are dirty files in the build then a suffix will be added.
	 * 
	 * @return
	 */
	public String getBuild() {
		return build;
	}

	/**
	 * Gets the version number the Maven project.
	 * 
	 * @return
	 */
	public String getVersionTag() {
		return versionTag;
	}

	/**
	 * The build has uncommitted changes.
	 * 
	 * @return
	 */
	public boolean isDirty() {
		return isDirty;
	}

	/**
	 * Gets the build time string.
	 * @return
	 */
	public String getBuildTime() {
		return buildTime;
	}

	/**
	 * Stores the version details to an external output source.
	 * 
	 * @param sink Destination of version
	 * @throws IOException 
	 */
	public void store(OutputStream sink) throws IOException {
		Properties props = new Properties();

		// Pick out key settings
		props.setProperty(BUILD_PROPERTY, build);
		props.setProperty(DIRTY_PROPERTY, Boolean.toString(isDirty));
		props.setProperty(VERSION_PROPERTY, versionTag);
		props.setProperty(DATE_PROPERTY, buildTime);

		props.store(sink, "Version properties");
	}

	public String getShortVersion() {
		return versionTag + "-" + build + (isDirty ? "-dirty" : "");
	}

	public String getDescription() {
		return versionTag + " - Build " + build + (isDirty ? "-dirty" : "");
	}

	public String getBuildDescription() {
		return build + (isDirty ? "-dirty" : "");
	}
	
	@Override
	public int hashCode() {
		return versionTag.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Version other = (Version) obj;
		if (build == null) {
			if (other.build != null)
				return false;
		} else if (!build.equals(other.build))
			return false;
		if (versionTag == null) {
			if (other.versionTag != null)
				return false;
		} else if (!versionTag.equals(other.versionTag))
			return false;
		return (isDirty == other.isDirty);
	}
}