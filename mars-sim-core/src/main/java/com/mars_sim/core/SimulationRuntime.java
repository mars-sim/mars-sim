/*
 * Mars Simulation Project
 * SimulationRuntime.java
 * @date 2025-08-17
 * @author Barry Evans
 */
package com.mars_sim.core;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import org.apache.commons.io.FileUtils;

import com.mars_sim.core.logging.SimuLoggingFilter;
import com.mars_sim.core.logging.SimuLoggingFormatter;
import com.mars_sim.core.map.common.FileLocator;
import com.mars_sim.core.tool.Msg;

/**
 * A singleton that represents the runtime environment of the Simulation.
 */
public class SimulationRuntime {
	
	/** default logger. */
	private static final Logger logger = Logger.getLogger(SimulationRuntime.class.getName());

	private static final String USERCONFIG_DIR = "conf";
	private static final String HOME_DIR = ".mars-sim";
	private static final String SAVE_DIR = "saved";
	private static final String XML_DIR = "xml";
	private static final String AUTOSAVE_DIR = "autosave";
	private static final String LOG_DIR = "logs";
	private static final String LOGGING_PROPERTIES = "/logging.properties";

	// Name of the file generated by the Maven build
	private static final String VERSION_PROPERTIES = "version.properties";

	public static final Version VERSION;

	private static String dataDir = null;

	// Load the properties file
	static {
		setDataDir(System.getProperty("user.home") + File.separator + HOME_DIR);

		ClassLoader loader = Version.class.getClassLoader();
		InputStream stream = loader.getResourceAsStream(VERSION_PROPERTIES);

		Version found = null;
		if (stream != null) {
			try {
				found = Version.fromStream(stream);
			}
			catch(IOException ioe) {
				logger.log(Level.SEVERE, "Problem loading default version", ioe);
			}
		}

		// Catch all
		if (found == null) {
			found = new Version();
		}
		VERSION = found;
	}

	/** # of thread(s). */
	public static final int NUM_CORES = Runtime.getRuntime().availableProcessors();
	/** OS string. */
	public static final String OS = System.getProperty("os.name"); 
	/** Java version string. */
	private static final String JAVA_TAG = System.getProperty("java.version");
	/** Java version string. */
	private static final String JAVA_VERSION = "Java " + (JAVA_TAG.contains("(") ?
			JAVA_TAG.substring(0, JAVA_TAG.indexOf("(") - 1) : JAVA_TAG);
	/** OS architecture string. */
	private static final String OS_ARCH = (System.getProperty("os.arch").contains("64") ? "64-bit" : "32-bit");
	public static final String SHORT_TITLE = Msg.getString("Simulation.title"); 
	public static final String LONG_TITLE = SHORT_TITLE + " " + VERSION.getVersionTag()
			+ " - " + OS_ARCH + " " + JAVA_VERSION + " - " + NUM_CORES
			+ ((NUM_CORES == 1) ? " Core" : " Cores"); 
	
	private static boolean fileLogEnabled = false;

	/**
	 * Private constructor prevents instantiation.
	 */
	private SimulationRuntime() {
	}
	
	public static void setDataDir(String newDir) {
		dataDir = newDir;
		FileLocator.setBaseDir(newDir);
	}
	
	public static String getDataDir() {
		return dataDir;
	}
	
	public static String getMusicDir() {
		return dataDir + File.separator + Msg.getString("Simulation.musicFolder");
	}
	
	public static String getUserConfigDir() {
		return dataDir + File.separator + USERCONFIG_DIR;
	}
	
	public static String getSaveDir() {
		return dataDir + File.separator + SAVE_DIR;
	}
	
	public static String getXMLDir() {
		return dataDir + File.separator + XML_DIR;
	}
	
	public static String getAutoSaveDir() {
		return dataDir + File.separator + AUTOSAVE_DIR;
	}

	public static String getLogDir() {
		return dataDir + File.separator + LOG_DIR;
	}

	/**
	 * Initialises the runtime logging. This is a facade onto the java logging classes.
	 */
    public static void initialseLogging() {

        try (var conf = SimulationRuntime.class.getResourceAsStream(LOGGING_PROPERTIES)) {
            LogManager.getLogManager().readConfiguration(conf);
        } catch (IOException e) {
            // Problem with the logging.properties file
        	logger.log(Level.SEVERE, "Unable to initialize logging.properties ", e);
        }
    }

    /**
     * Programmically enables file logging. This will use the configured log folder.
     * @param string 
     */
    public static void enableFileLogging(String string) {
        if (!fileLogEnabled) {
            String logdir  = getLogDir();
            (new File(logdir)).mkdirs();

            try {
				int sizePerFile = 500000; // 500 KB
				int fileBacklog = 3;

				// Parse optional arguments
				if (string != null) {
					String[] parts = string.split(":");
					if (parts.length != 2) {
						throw new IllegalArgumentException("Invalid log argument '" + string + "'. Expected format is <size>:<count>");
					}

					try {
						sizePerFile = parseMemorySize(parts[0]);
						fileBacklog = Integer.parseInt(parts[1]);
					}
					catch(Exception e) {
						throw new IllegalArgumentException("Invalid log format: " + e.getMessage(), e);
					}
				}
				// Create the file handler
				String logFile = logdir + File.separator + "mars_simu_%u.%g.log";
                Handler fileHandler = new FileHandler(logFile, sizePerFile, fileBacklog, true);
                fileHandler.setFilter(new SimuLoggingFilter());
                fileHandler.setFormatter(new SimuLoggingFormatter());
                fileHandler.setLevel (Level.ALL);

				logger.config("File logging enabled to " + logFile + " with " + fileBacklog + " files of "
								+ String.format("%,d", sizePerFile) + " each.");

                // Get top level logger
                Logger.getLogger("").addHandler(fileHandler);
				
                fileLogEnabled = true;

            } catch (IOException e) {
            	logger.log(Level.SEVERE, "Unable to start file logging ", e);
            }
        }
    }

	/**
	 * Purges any old files from a directory.
	 * 
	 * @param dir Directory to scan
	 * @param retianedCount Number of files to retain.
	 * @param extension Optional file extension to filter file list
	 */
    public static void purgeOldFiles(String dir, int retainedCount, String extension) {
		File[] files = (new File(dir)).listFiles((d, name) -> (extension == null)
																|| name.endsWith(extension));
		Arrays.sort(files, Comparator.comparingLong(File::lastModified).reversed());

		for (int i = retainedCount; i < files.length; i++) {
			File child = files[i];

			try {
				if (child.isDirectory()) {
					FileUtils.deleteDirectory(child);
				}
				else {
					Files.delete(child.toPath());
				}
			}
			catch(Exception e) {
				logger.log(Level.SEVERE, "Failed to remove old file " + child, e);
			}
		}
    }

	/**
	 * Parses a memory size string (e.g., "2G", "512M", "1024K") into bytes.
	 * 
	 * @param size The memory size string to parse
	 * @return The size in bytes
	 * @throws IllegalArgumentException if the format is invalid
	 */
	public static int parseMemorySize(String size) {
		if (size == null || size.trim().isEmpty()) {
			return 0;
		}
		
		size = size.trim().toUpperCase();
		int multiplier = 1;
		String numberPart = null;
		
		if (size.endsWith("K")) {
			multiplier = 1024;
			numberPart = size.substring(0, size.length() - 1);
		} else if (size.endsWith("M")) {
			multiplier = 1024 * 1024;
			numberPart = size.substring(0, size.length() - 1);
		} else if (size.endsWith("G")) {
			multiplier = 1024 * 1024 * 1024;
			numberPart = size.substring(0, size.length() - 1);
		}
		else {
			throw new IllegalArgumentException("Invalid size selector: " + size);
		}
		
		// Use Commons Lang3 for safe number parsing
		if (org.apache.commons.lang3.math.NumberUtils.isCreatable(numberPart)) {
			double number = org.apache.commons.lang3.math.NumberUtils.toDouble(numberPart);
			return (int) (number * multiplier);
		}
		
		throw new IllegalArgumentException("Invalid size format: " + size);
	}
}
